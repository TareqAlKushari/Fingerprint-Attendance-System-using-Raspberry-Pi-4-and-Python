import time
import datetime
import serial
import adafruit_fingerprint
import tempfile
#from pyfingerprint.pyfingerprint import PyFingerprint
from rpi_lcd import LCD # I2C LCD library 
import csv # CSV library
import os # OS library


uart = serial.Serial("/dev/ttyUSB0", baudrate=57600, timeout=1)

finger = adafruit_fingerprint.Adafruit_Fingerprint(uart)

mylcd = LCD()

list_data = []


##################################################
def deletes():
    if os.path.ismount('/media/pi/7C36-BFFC1'):
        # Use the USB flash drive as the storage device
        storage_device = '/media/pi/7C36-BFFC1'
        os.remove(storage_device + '/fingerprint_registration.csv')
        return True
    

def read_data():
    # Check if a USB flash drive or a micro SD card is mounted
    if os.path.ismount('/media/pi/7C36-BFFC1'):
        # Use the USB flash drive as the storage device
        storage_device = '/media/pi/7C36-BFFC1'
    elif os.path.ismount('/media/pi/SD'):
        # Use the micro SD card as the storage device
        storage_device = '/media/pi/SD'
    else:
        # No storage device found
        return False
    list_data.clear()
    # Create or open a CSV file named fingerprint_data.csv
    open(storage_device + '/fingerprint_registration.csv', 'a')
    with open(storage_device + '/fingerprint_registration.csv', newline='') as csvfile:
        # Create a CSV writer object
        csv_reader = csv.reader(csvfile)
        # Write the fingerprint data as a row in the CSV file
        for each_row in csv_reader:
            list_data.append(each_row)
    
    # Return True to indicate success
    return True

def fingerprint_data(data):
    # Check if a USB flash drive or a micro SD card is mounted
    if os.path.ismount('/media/pi/7C36-BFFC1'):
        # Use the USB flash drive as the storage device
        storage_device = '/media/pi/7C36-BFFC1'
    elif os.path.ismount('/media/pi/SD'):
        # Use the micro SD card as the storage device
        storage_device = '/media/pi/SD'
    else:
        # No storage device found
        return False
    
    # Create or open a CSV file named fingerprint_data.csv
    with open(storage_device + '/fingerprint_registration.csv', 'a') as csvfile:
        # Create a CSV writer object
        writer = csv.writer(csvfile)
        # Write the fingerprint data as a row in the CSV file
        writer.writerow(data)
        # Close the CSV file
        csvfile.close()
    
    # Return True to indicate success
    return True

# Define a function to save fingerprint data in a CSV file
def save_fingerprint_data(data):
    # Check if a USB flash drive or a micro SD card is mounted
    if os.path.ismount('/media/pi/7C36-BFFC1'):
        # Use the USB flash drive as the storage device
        storage_device = '/media/pi/7C36-BFFC1'
    elif os.path.ismount('/media/pi/SD'):
        # Use the micro SD card as the storage device
        storage_device = '/media/pi/SD'
    else:
        # No storage device found
        return False
    
    # Create or open a CSV file named fingerprint_data.csv
    with open(storage_device + '/fingerprint_data.csv', 'a') as csvfile:
        # Create a CSV writer object
        writer = csv.writer(csvfile)
        # Write the fingerprint data as a row in the CSV file
        writer.writerow(data)
        # Close the CSV file
        csvfile.close()
    
    # Return True to indicate success
    return True



def get_fingerprint():
    """Get a finger print image, template it, and see if it matches!"""
    print("Waiting for image...")
    mylcd.text("Waiting for image...", 1)
    while finger.get_image() != adafruit_fingerprint.OK:
        pass
    print("Templating...")
    mylcd.text("Templating...", 1)
    if finger.image_2_tz(1) != adafruit_fingerprint.OK:
        return False
    print("Searching...")
    mylcd.text("Searching...", 2)
    time.sleep(2)
    mylcd.clear()
    if finger.finger_search() != adafruit_fingerprint.OK:
        return False
    return True


# pylint: disable=too-many-branches
def get_fingerprint_detail():
    """Get a finger print image, template it, and see if it matches!
    This time, print out each error instead of just returning on failure"""
    print("Getting image...", end="")
    i = finger.get_image()
    if i == adafruit_fingerprint.OK:
        print("Image taken")
    else:
        if i == adafruit_fingerprint.NOFINGER:
            print("No finger detected")
        elif i == adafruit_fingerprint.IMAGEFAIL:
            print("Imaging error")
        else:
            print("Other error")
        return False

    print("Templating...", end="")
    i = finger.image_2_tz(1)
    if i == adafruit_fingerprint.OK:
        print("Templated")
    else:
        if i == adafruit_fingerprint.IMAGEMESS:
            print("Image too messy")
        elif i == adafruit_fingerprint.FEATUREFAIL:
            print("Could not identify features")
        elif i == adafruit_fingerprint.INVALIDIMAGE:
            print("Image invalid")
        else:
            print("Other error")
        return False

    print("Searching...", end="")
    i = finger.finger_fast_search()
    # pylint: disable=no-else-return
    # This block needs to be refactored when it can be tested.
    if i == adafruit_fingerprint.OK:
        print("Found fingerprint!")
        return True
    else:
        if i == adafruit_fingerprint.NOTFOUND:
            print("No match found")
        else:
            print("Other error")
        return False



# pylint: disable=too-many-statements
def enroll_finger(location):
    """Take a 2 finger images and template it, then store in 'location'"""
    name = input("Enter Your Name # ")
    for fingerimg in range(1, 3):
        if fingerimg == 1:
            print("Place finger on sensor...", end="")
        else:
            print("Place same finger again...", end="")

        while True:
            i = finger.get_image()
            if i == adafruit_fingerprint.OK:
                print("Image taken")
                break
            if i == adafruit_fingerprint.NOFINGER:
                print(".", end="")
            elif i == adafruit_fingerprint.IMAGEFAIL:
                print("Imaging error")
                return False
            else:
                print("Other error")
                return False

        print("Templating...", end="")
        i = finger.image_2_tz(fingerimg)
        if i == adafruit_fingerprint.OK:
            print("Templated")
        else:
            if i == adafruit_fingerprint.IMAGEMESS:
                print("Image too messy")
            elif i == adafruit_fingerprint.FEATUREFAIL:
                print("Could not identify features")
            elif i == adafruit_fingerprint.INVALIDIMAGE:
                print("Image invalid")
            else:
                print("Other error")
            return False

        if fingerimg == 1:
            print("Remove finger")
            time.sleep(1)
            while i != adafruit_fingerprint.NOFINGER:
                i = finger.get_image()

    print("Creating model...", end="")
    i = finger.create_model()
    if i == adafruit_fingerprint.OK:
        print("Created")
    else:
        if i == adafruit_fingerprint.ENROLLMISMATCH:
            print("Prints did not match")
        else:
            print("Other error")
        return False
    data = []
    data.insert((location - 1), name)
    fingerprint_data(data)
    time.sleep(1)
    read_data()
    time.sleep(1)
    print("Storing model # {}  {}" .format(location, list_data[int(location - 1)]))
    i = finger.store_model(location)
    if i == adafruit_fingerprint.OK:
        print("Stored")
    else:
        if i == adafruit_fingerprint.BADLOCATION:
            print("Bad storage location")
        elif i == adafruit_fingerprint.FLASHERR:
            print("Flash storage error")
        else:
            print("Other error")
        return False

    return True


def save_fingerprint_image(filename):
    """Scan fingerprint then save image to filename."""
    while finger.get_image():
        pass

    # let PIL take care of the image headers and file structure
    from PIL import Image  # pylint: disable=import-outside-toplevel

    img = Image.new("L", (256, 288), "white")
    pixeldata = img.load()
    mask = 0b00001111
    result = finger.get_fpdata(sensorbuffer="image")

    # this block "unpacks" the data received from the fingerprint
    #   module then copies the image data to the image placeholder "img"
    #   pixel by pixel.  please refer to section 4.2.1 of the manual for
    #   more details.  thanks to Bastian Raschke and Danylo Esterman.
    # pylint: disable=invalid-name
    x = 0
    # pylint: disable=invalid-name
    y = 0
    # pylint: disable=consider-using-enumerate
    for i in range(len(result)):
        pixeldata[x, y] = (int(result[i]) >> 4) * 17
        x += 1
        pixeldata[x, y] = (int(result[i]) & mask) * 17
        if x == 255:
            x = 0
            y += 1
        else:
            x += 1

    if not img.save(filename):
        return True
    return False


##################################################

def get_num(max_number):
    """Use input() to get a valid number from 0 to the maximum size
    of the library. Retry till success!"""
    i = 0
    while (i >= max_number) or (i < 1):
        try:
            
            i = int(input("Enter ID # from {}--{}: ".format((finger.template_count + 1), (max_number))))
        except ValueError:
            pass
    return i


def run_from_admin():
    while True:
        read_data()
        print("What is the mode...")
        print("1) Fingerprint Registration...")
        print("2) Attendance Fingerprint...")
        x = input("> ")
        
        if x == "1":
            print("----------------")
            if finger.read_templates() != adafruit_fingerprint.OK:
                raise RuntimeError("Failed to read templates")
            print("Fingerprint templates: ", finger.templates)
            if finger.count_templates() != adafruit_fingerprint.OK:
                raise RuntimeError("Failed to read templates")
            print("Number of templates found: ", finger.template_count)
            if finger.read_sysparam() != adafruit_fingerprint.OK:
                raise RuntimeError("Failed to get system parameters")
            print("Size of template library: ", finger.library_size)
            print("e) enroll print")
            print("d) delete print")
            print("s) save fingerprint image")
            print("r) reset library")
            print("q) quit")
            print("----------------")
            c = input("> ")

            if c == "e":
                enroll_finger(get_num(finger.library_size))
            if c == "d":
                if finger.delete_model(get_num(finger.library_size)) == adafruit_fingerprint.OK:
                    print("Deleted!")
                else:
                    print("Failed to delete")
            if c == "s":
                if save_fingerprint_image("fingerprint.png"):
                    print("Fingerprint image saved")
                else:
                    print("Failed to save fingerprint image")
            if c == "r":
                if finger.empty_library() == adafruit_fingerprint.OK:
                    list_data.clear()
                    deletes()
                    print("Library empty!")
                else:
                    print("Failed to empty library")
            if c == "q":
                print("Exiting fingerprint example program")
                raise SystemExit
        elif x == "2":
            if get_fingerprint():
                print("Detected #", finger.finger_id, "with confidence", finger.confidence)
                # get the current date and time
                now = datetime.datetime.now()
                list_data[(int(finger.finger_id) - 1)].append(now)
                # Save the fingerprint template in a CSV file on the storage device
                if save_fingerprint_data(list_data[(int(finger.finger_id) - 1)]):
                    # The fingerprint data was saved successfully
                    # Display a message to indicate success and the file name
                    print("Data saved in")
                    print("fingerprint_data.csv")
                    
                    # Wait for 2 seconds
                    time.sleep(2)
                    
                    # Continue the loop
                    continue
                
                else:
                    # The fingerprint data could not be saved due to no storage device found
                    # Display a message to indicate failure and ask to insert a storage device
                    print("Data not saved")
                    print("Insert USB or SD card")
                    
                    # Wait for 2 seconds
                    time.sleep(2)
                    
                    # Continue the loop
                    continue
            else:
                print("Finger not found")
        else:
            print("the number is uncorecte...")
    return True

def run_from_user():
    while True:
        mylcd.clear()
        read_data()
        if get_fingerprint():
            print("Detected #", finger.finger_id, "with confidence", finger.confidence)
            name_string = str(list_data[(int(finger.finger_id) - 1)])
            now = datetime.datetime.now()
            mylcd.text("# {} {} ".format(finger.finger_id, name_string[2:-2]) , 1)
            mylcd.text("# {} ".format(now) , 2)
            time.sleep(2)
            mylcd.clear()
            # get the current date and time
            list_data[(int(finger.finger_id) - 1)].append(now)
            # Save the fingerprint template in a CSV file on the storage device
            if save_fingerprint_data(list_data[(int(finger.finger_id) - 1)]):
                # The fingerprint data was saved successfully
                # Display a message to indicate success and the file name
                print("Data saved in")
                mylcd.text("Data saved in", 1)
                time.sleep(1)
                print("fingerprint_data.csv")
                mylcd.text("fingerprint_data.csv", 2)
                time.sleep(1)
                
                # Wait for 2 seconds
                time.sleep(2)
                mylcd.clear()
                
                # Continue the loop
                continue
            
            else:
                # The fingerprint data could not be saved due to no storage device found
                # Display a message to indicate failure and ask to insert a storage device
                print("Data not saved")
                mylcd.text("Data not saved", 1)
                print("Insert USB or SD card")
                mylcd.text("Insert USB or SD card", 2)
                
                # Wait for 2 seconds
                time.sleep(2)
                mylcd.clear()
                
                # Continue the loop
                continue
        else:
            print("Finger not found")
            mylcd.text("Finger not found", 1)
            time.sleep(2)
            mylcd.clear()
    return True

#run_from_admin()

run_from_user()
